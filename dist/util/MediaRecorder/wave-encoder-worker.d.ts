declare const _default: "\nvar BYTES_PER_SAMPLE = 2\n\nvar recorded = []\n\nfunction encode (buffer) {\n    var length = buffer.length\n    var data = new Uint8Array(length * BYTES_PER_SAMPLE)\n    for (var i = 0; i < length; i++) {\n        var index = i * BYTES_PER_SAMPLE\n        var sample = buffer[i]\n        if (sample > 1) {\n            sample = 1\n        } else if (sample < -1) {\n            sample = -1\n        }\n        sample = sample * 32768\n        data[index] = sample\n        data[index + 1] = sample >> 8\n    }\n    recorded.push(data)\n}\n\nfunction dump (sampleRate) {\n    var bufferLength = recorded.length ? recorded[0].length : 0\n    var length = recorded.length * bufferLength\n    var wav = new Uint8Array(44 + length)\n    var view = new DataView(wav.buffer)\n\n    // RIFF identifier 'RIFF'\n    view.setUint32(0, 1380533830, false)\n    // file length minus RIFF identifier length and file description length\n    view.setUint32(4, 36 + length, true)\n    // RIFF type 'WAVE'\n    view.setUint32(8, 1463899717, false)\n    // format chunk identifier 'fmt '\n    view.setUint32(12, 1718449184, false)\n    // format chunk length\n    view.setUint32(16, 16, true)\n    // sample format (raw)\n    view.setUint16(20, 1, true)\n    // channel count\n    view.setUint16(22, 1, true)\n    // sample rate\n    view.setUint32(24, sampleRate, true)\n    // byte rate (sample rate * block align)\n    view.setUint32(28, sampleRate * BYTES_PER_SAMPLE, true)\n    // block align (channel count * bytes per sample)\n    view.setUint16(32, BYTES_PER_SAMPLE, true)\n    // bits per sample\n    view.setUint16(34, 8 * BYTES_PER_SAMPLE, true)\n    // data chunk identifier 'data'\n    view.setUint32(36, 1684108385, false)\n    // data chunk length\n    view.setUint32(40, length, true)\n\n    for (var i = 0; i < recorded.length; i++) {\n        wav.set(recorded[i], i * bufferLength + 44)\n    }\n\n    recorded = []\n    postMessage(wav.buffer, [wav.buffer])\n}\n\nthis.onmessage = function (e) {\n    if (e.data[0] === 'encode') {\n        encode(e.data[1])\n    } else {\n        dump(e.data[1])\n    }\n}\n";
export default _default;
